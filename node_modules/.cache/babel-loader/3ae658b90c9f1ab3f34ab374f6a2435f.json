{"ast":null,"code":"import { useState, useEffect } from \"react\";\nexport default function useApplicationData() {\n  //This custom hook is the beiung used to manage the overall data of the app.\n  const [state, setState] = useState({\n    array: []\n  }); //function that generates a new array with randomized numbers\n\n  function resetArray() {\n    let array = [];\n\n    for (let i = 0; i <= 290; i++) {\n      array.push(Math.floor(Math.random() * (900 - 5 + 1) + 5));\n    }\n\n    setState({\n      array\n    });\n  }\n\n  ; //Once the comonpent loads \n\n  useEffect(() => {\n    resetArray();\n  }, []); //Function that is responsible for comparing the left and right arrays then returning the sortedarray\n\n  function merge(left, right) {\n    let sortedArray = []; //Looping until one of the arrays has reached 0 elements\n\n    while (left.length && right.length) {\n      if (left[0] < right[0]) {\n        sortedArray.push(left.shift());\n      } else {\n        sortedArray.push(right.shift());\n      }\n    } //Using the spread operator to concat the sorted elements, with the left and right arrays\n\n\n    setState({\n      array: [...sortedArray, ...left, ...right]\n    });\n    return [...sortedArray, ...left, ...right];\n  }\n\n  ; //Main that takes an unsorted array as input and uses recursion to sort it in ascending order\n\n  function mergeSort(arr) {\n    //If the array has 1 or 0 elements then exit out of the function\n    if (arr.length <= 1) {\n      return arr;\n    } //Create the left and right arrays by splitting the original array in the middle\n\n\n    const middle = Math.floor(arr.length / 2);\n    let left = arr.slice(0, middle);\n    let right = arr.slice(middle); //Return the sorted array from the merge function\n\n    return merge(mergeSort(left), mergeSort(right));\n  }\n\n  ; //function that swaps two values\n\n  function swap(arr, i, j) {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n\n  ; //function that creates a max heap to sort an array in ascending order\n\n  function heapRoot(arr, length, index) {\n    let leftChild = 2 * index + 1;\n    let rightChild = 2 * index + 2;\n    let parent = index;\n\n    if (leftChild < length && arr[leftChild] > arr[parent]) {\n      parent = leftChild;\n    }\n\n    if (rightChild < length && arr[rightChild] > arr[parent]) {\n      parent = rightChild;\n    }\n\n    if (parent != index) {\n      swap(arr, parent, index);\n      heapRoot(arr, length, parent);\n    }\n  }\n\n  ; //Function that uses the max heap data structure to sort the array\n\n  function heapSort(arr) {\n    let n = arr.length;\n    let i = Math.floor(n / 2 - 1);\n    let k = n - 1;\n\n    while (i >= 0) {\n      heapRoot(arr, n, i);\n      i--;\n    }\n\n    while (k >= 0) {\n      swap(arr, 0, k);\n      heapRoot(arr, k, 0);\n      k--;\n    }\n\n    setState({\n      array: arr\n    });\n  }\n\n  ; //Function that sorts an array in ascending order by bubbling elements to their respective positions\n\n  function bubbleSort(arr) {\n    //Loop through all of the elements of the array\n    for (let i = 0; i < arr.length; i++) {\n      let swapped = false;\n\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        //If the current element is greater than it's following element then swapped them\n        if (arr[j] > arr[j + 1]) {\n          let temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp; //Set the boolean tracker to true\n\n          swapped = true;\n        }\n      } //If no elements were swap then break out of the outer loop and the array is sorted\n\n\n      if (!swapped) {\n        break;\n      }\n    }\n\n    setState({\n      array: arr\n    });\n  }\n\n  ; //Function that sorts an array in ascending order by finding the min value and placing it at the start of the array\n\n  function selectionSort(arr) {\n    //Loop through all of the elements in the array\n    for (let i = 0; i < arr.length; i++) {\n      let minIndex = i;\n\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[minIndex] > arr[j]) {\n          minIndex = j;\n        }\n      }\n\n      [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];\n    }\n\n    setState({\n      array: arr\n    });\n  }\n\n  ;\n  return {\n    state,\n    resetArray,\n    mergeSort,\n    heapSort,\n    bubbleSort,\n    selectionSort\n  };\n}\n;","map":{"version":3,"sources":["/Users/jacobcarlone/lighthouse1/Sorting-Visualizer/sorting-visualizer/src/hooks/useApplicationData.jsx"],"names":["useState","useEffect","useApplicationData","state","setState","array","resetArray","i","push","Math","floor","random","merge","left","right","sortedArray","length","shift","mergeSort","arr","middle","slice","swap","j","temp","heapRoot","index","leftChild","rightChild","parent","heapSort","n","k","bubbleSort","swapped","selectionSort","minIndex"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\n\nexport default function useApplicationData(){\n\n    //This custom hook is the beiung used to manage the overall data of the app.\n    const [state, setState] = useState({\n        array: []\n    });\n\n    //function that generates a new array with randomized numbers\n    function resetArray(){\n        let array = [];\n        for (let i = 0; i <= 290; i++){\n            array.push(Math.floor(Math.random() * (900 - 5 + 1) + 5));\n        }\n        setState({ array });\n    };\n\n    //Once the comonpent loads \n    useEffect(() => {\n        resetArray();\n    }, []);\n\n    //Function that is responsible for comparing the left and right arrays then returning the sortedarray\n    function merge(left, right) {\n        let sortedArray = [];\n  \n        //Looping until one of the arrays has reached 0 elements\n        while (left.length && right.length) {\n            if (left[0] < right[0]) {\n                sortedArray.push(left.shift());\n            } else {\n                sortedArray.push(right.shift());\n            }\n        }\n        //Using the spread operator to concat the sorted elements, with the left and right arrays\n        setState({\n            array: [...sortedArray, ...left, ...right]\n        })\n        return [...sortedArray, ...left, ...right];\n    };\n\n    //Main that takes an unsorted array as input and uses recursion to sort it in ascending order\n    function mergeSort(arr) {\n\n        //If the array has 1 or 0 elements then exit out of the function\n        if (arr.length <= 1) {\n        return arr;\n        }\n    \n        //Create the left and right arrays by splitting the original array in the middle\n        const middle = Math.floor(arr.length / 2);\n        let left = arr.slice(0, middle);\n        let right = arr.slice(middle);\n    \n        //Return the sorted array from the merge function\n        return merge(mergeSort(left), mergeSort(right));\n    };\n\n    //function that swaps two values\n    function swap(arr, i, j) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    };\n\n    //function that creates a max heap to sort an array in ascending order\n    function heapRoot(arr, length, index) {\n        let leftChild = 2 * index + 1;\n        let rightChild = 2 * index + 2;\n        let parent = index;\n    \n        if (leftChild < length && arr[leftChild] > arr[parent]) {\n            parent = leftChild;\n        }\n    \n        if (rightChild < length && arr[rightChild] > arr[parent]) {\n            parent = rightChild;\n        }\n    \n        if (parent != index) {\n            swap(arr, parent, index);\n            heapRoot(arr, length, parent);\n        }\n    };\n\n    //Function that uses the max heap data structure to sort the array\n    function heapSort(arr) {\n        let n = arr.length;\n        let i = Math.floor(n / 2 - 1);\n        let k = n - 1;\n    \n        while (i >= 0) {\n            heapRoot(arr, n, i);\n            i--;\n        }\n    \n        while (k >= 0) {\n            swap(arr, 0, k);\n            heapRoot(arr, k, 0);\n            k--;\n        }\n    \n        setState({\n            array: arr\n        });\n    };\n\n    //Function that sorts an array in ascending order by bubbling elements to their respective positions\n    function bubbleSort(arr) {\n        \n        //Loop through all of the elements of the array\n        for (let i = 0; i < arr.length; i++) { \n            let swapped = false;\n  \n            for (let j = 0; j < arr.length - i - 1; j++) {\n        \n                //If the current element is greater than it's following element then swapped them\n                if (arr[j] > arr[j + 1]) {\n                    let temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n  \n                    //Set the boolean tracker to true\n                    swapped = true;\n                }\n            }\n            //If no elements were swap then break out of the outer loop and the array is sorted\n            if (!swapped) {\n                break;\n            }\n        }\n  \n        setState({\n            array: arr\n        });\n  };\n\n    //Function that sorts an array in ascending order by finding the min value and placing it at the start of the array\n    function selectionSort(arr) {\n  \n        //Loop through all of the elements in the array\n        for (let i = 0; i < arr.length; i++){\n            let minIndex = i;\n  \n            for (let j = i + 1; j < arr.length; j++){\n                if (arr[minIndex] > arr[j]){\n                    minIndex = j;\n                }\n            }\n            [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];\n        }\n        setState({\n            array: arr\n        });\n    };\n\n    return {\n        state,\n        resetArray,\n        mergeSort,\n        heapSort,\n        bubbleSort,\n        selectionSort\n    }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jacobcarlone/lighthouse1/Sorting-Visualizer/sorting-visualizer/src/components/Navigation/index.jsx\";\nimport React from 'react';\nimport './index.css';\nexport default function Navigation({\n  state,\n  resetArray,\n  mergeSort,\n  bubbleSort,\n  heapSort,\n  selectionSort,\n  insertionSort,\n  speedChange,\n  sizeChange\n}) {\n  //Function the generates a new array and turns all bars back to turquoise\n  function reset() {\n    let length = state.array.length.toString();\n    const barWidth = {\n      \"50\": 20,\n      \"55\": 19,\n      \"60\": 17,\n      \"65\": 16,\n      \"70\": 14,\n      \"75\": 13,\n      \"80\": 12,\n      \"85\": 11,\n      \"90\": 11,\n      \"95\": 10,\n      \"100\": 9\n    };\n    resetArray();\n    const bars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < bars.length; i++) {\n      const barStyle = bars[i].style;\n      console.log(barStyle);\n      barStyle.width = `${barWidth[length]}px`;\n      barStyle.backgroundColor = \"turquoise\";\n    }\n  }\n\n  ; //Function that creates the swapping and comparison animations for merge sort\n\n  function merge() {\n    let colorChanges = mergeSort(state.array); //Loop through the colorChange arrays\n\n    for (let i = 0; i < colorChanges.length; i++) {\n      //Get all the array bars in the DOM\n      const bars = document.getElementsByClassName(\"array-bar\"); //If first two arrays of a triplet, means a color change will happen\n\n      const colorChange = i % 3 !== 2; //If colorChange is true then we need to change the color of the array bars\n\n      if (colorChange) {\n        const [barOne, barTwo] = colorChanges[i];\n        const barOneStyle = bars[barOne].style;\n        const barTwoStyle = bars[barTwo].style; //If first color change of triplet we want the bars being compared to turn red\n\n        const color = i % 3 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * state.speedSlider); //Else is no color change then we are overwritting a value in the main array\n      } else {\n        setTimeout(() => {\n          const [barOne, barHeight] = colorChanges[i];\n          const barOneStyle = bars[barOne].style;\n          barOneStyle.height = `${barHeight}px`;\n        }, i * state.speedSlider);\n      }\n    }\n  }\n\n  ; //Function that displays the bubbling animations for bubble sort\n\n  function bubble() {\n    let colorChanges = bubbleSort(state.array); //Loop through the colorChange arrays\n\n    for (let i = 0; i < colorChanges.length; i++) {\n      //Get all the array bars in the DOM\n      const bars = document.getElementsByClassName(\"array-bar\"); //If first two arrays of a triplet, means a color change will happen\n\n      const colorChange = colorChanges[i][0] !== \"swap\"; //If colorChange is true then we need to change the color of the array bars\n\n      if (colorChange) {\n        if (colorChanges[i][0] === \"red\" || colorChanges[i][0] === \"turquoise\") {\n          const [color, barOne, barTwo] = colorChanges[i];\n          const barOneStyle = bars[barOne].style;\n          const barTwoStyle = bars[barTwo].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * state.speedSlider);\n        } else {\n          //Change the sorted bar to purple\n          const color = \"purple\";\n          const [barOne] = colorChanges[i];\n          const barOneStyle = bars[barOne].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n          }, i * state.speedSlider);\n        } //Else is no color change then we are swapping the values or overwritting the same values in the array\n\n      } else {\n        setTimeout(() => {\n          const [color, barOne, barHeight] = colorChanges[i];\n          const barOneStyle = bars[barOne].style;\n          barOneStyle.height = `${barHeight}px`;\n        }, i * state.speedSlider);\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nav-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Sorting Visualizer\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nav-sliders\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, \"Array Size\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    min: \"50\",\n    max: \"100\",\n    value: state.sizeSlider,\n    step: \"5\",\n    className: \"size-slider\",\n    onChange: e => sizeChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"speed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, \"Sorting Speed\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    min: \"1\",\n    max: \"51\",\n    value: state.speedSlider,\n    step: \"5\",\n    className: \"speed-slider\",\n    onChange: e => speedChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nav-reset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => reset(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Generate New Array\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nav-sortStyle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => merge(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => bubble(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => heapSort(state.array),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => selectionSort(state.array),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, \"Selection Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => insertionSort(state.array),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, \"Insertion Sort\")));\n}\n;","map":{"version":3,"sources":["/Users/jacobcarlone/lighthouse1/Sorting-Visualizer/sorting-visualizer/src/components/Navigation/index.jsx"],"names":["React","Navigation","state","resetArray","mergeSort","bubbleSort","heapSort","selectionSort","insertionSort","speedChange","sizeChange","reset","length","array","toString","barWidth","bars","document","getElementsByClassName","i","barStyle","style","console","log","width","backgroundColor","merge","colorChanges","colorChange","barOne","barTwo","barOneStyle","barTwoStyle","color","setTimeout","speedSlider","barHeight","height","bubble","sizeSlider","e"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport default function Navigation({\n    state,\n    resetArray,\n    mergeSort,\n    bubbleSort,\n    heapSort,\n    selectionSort,\n    insertionSort,\n    speedChange,\n    sizeChange,\n}){\n\n    //Function the generates a new array and turns all bars back to turquoise\n    function reset(){\n        let length = state.array.length.toString();\n        const barWidth = {\n            \"50\": 20,\n            \"55\": 19,\n            \"60\": 17,\n            \"65\": 16,\n            \"70\": 14,\n            \"75\": 13,\n            \"80\": 12,\n            \"85\": 11,\n            \"90\": 11,\n            \"95\": 10,\n            \"100\": 9\n          };\n        resetArray();\n        const bars = document.getElementsByClassName(\"array-bar\"); \n\n        for (let i = 0; i < bars.length; i++){\n            const barStyle = bars[i].style;\n            console.log(barStyle);\n            barStyle.width = `${barWidth[length]}px`;\n            barStyle.backgroundColor = \"turquoise\";\n        }\n     \n    };\n\n    //Function that creates the swapping and comparison animations for merge sort\n    function merge(){\n        let colorChanges = mergeSort(state.array);\n\n        //Loop through the colorChange arrays\n        for (let i = 0; i < colorChanges.length; i++){\n\n            //Get all the array bars in the DOM\n            const bars = document.getElementsByClassName(\"array-bar\");\n\n            //If first two arrays of a triplet, means a color change will happen\n            const colorChange = i % 3 !== 2;\n\n            //If colorChange is true then we need to change the color of the array bars\n            if (colorChange){\n                const [barOne, barTwo] = colorChanges[i];\n                const barOneStyle = bars[barOne].style;\n                const barTwoStyle = bars[barTwo].style;\n\n                //If first color change of triplet we want the bars being compared to turn red\n                const color = i % 3 === 0 ? \"red\" : \"turquoise\";\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * state.speedSlider);\n\n            //Else is no color change then we are overwritting a value in the main array\n            } else {\n                setTimeout(() => {\n                    const [barOne, barHeight] = colorChanges[i];\n                    const barOneStyle = bars[barOne].style;\n                    barOneStyle.height = `${barHeight}px`;\n                }, i * state.speedSlider);\n            }\n        }\n    };\n\n    //Function that displays the bubbling animations for bubble sort\n    function bubble(){\n        let colorChanges = bubbleSort(state.array);\n\n         //Loop through the colorChange arrays\n         for (let i = 0; i < colorChanges.length; i++){\n\n            //Get all the array bars in the DOM\n            const bars = document.getElementsByClassName(\"array-bar\");\n\n            //If first two arrays of a triplet, means a color change will happen\n            const colorChange = colorChanges[i][0] !== \"swap\";\n\n            //If colorChange is true then we need to change the color of the array bars\n            if (colorChange){\n                if (colorChanges[i][0] === \"red\" || colorChanges[i][0] === \"turquoise\"){\n                    const [color, barOne, barTwo] = colorChanges[i];\n                    const barOneStyle = bars[barOne].style;\n                    const barTwoStyle = bars[barTwo].style;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }, i * state.speedSlider);\n                \n                } else {\n                    //Change the sorted bar to purple\n                    const color = \"purple\";\n                    const [barOne] = colorChanges[i];\n                    const barOneStyle = bars[barOne].style;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                    }, i * state.speedSlider);\n                }\n\n            //Else is no color change then we are swapping the values or overwritting the same values in the array\n            } else {\n                setTimeout(() => {\n                    const [color, barOne, barHeight] = colorChanges[i];\n                    const barOneStyle = bars[barOne].style;\n                    barOneStyle.height = `${barHeight}px`;\n                }, i * state.speedSlider);\n            }\n        }\n    }\n    return (\n        <nav>\n            <div className=\"nav-title\">Sorting Visualizer</div>\n            <div className =\"nav-sliders\">\n                <div className=\"size\">\n                    <h4>Array Size</h4>\n                    <input type=\"range\" min=\"50\" max=\"100\" value={state.sizeSlider} step=\"5\" className=\"size-slider\" onChange={(e) => sizeChange(e)}/>\n                </div>\n                <div className=\"speed\">\n                    <h4>Sorting Speed</h4>\n                    <input type=\"range\" min=\"1\" max=\"51\" value={state.speedSlider} step =\"5\" className=\"speed-slider\" onChange={(e) => speedChange(e)}/>\n                </div>\n            </div>\n            <div className=\"nav-reset\">\n                <button onClick={()=> reset()}>Generate New Array</button>\n            </div>\n            <div className=\"nav-sortStyle\">\n                <button onClick={()=> merge()}>Merge Sort</button>\n                <button onClick={()=> bubble()}>Bubble Sort</button>\n                <button onClick={()=> heapSort(state.array)}>Heap Sort</button>\n                <button onClick={()=> selectionSort(state.array)}>Selection Sort</button>\n                <button onClick={()=> insertionSort(state.array)}>Insertion Sort</button>\n            </div>\n        </nav>\n    )\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useState, useEffect } from \"react\";\nexport default function useApplicationData() {\n  //This custom hook is the beiung used to manage the overall data of the app.\n  const [state, setState] = useState({\n    array: []\n  }); //function that generates a new array with randomized numbers\n\n  function resetArray() {\n    let array = [];\n\n    for (let i = 0; i <= 290; i++) {\n      array.push(Math.floor(Math.random() * (900 - 5 + 1) + 5));\n    }\n\n    setState({\n      array\n    });\n  }\n\n  ; //Once the comonpent loads \n\n  useEffect(() => {\n    resetArray();\n  }, []); //function that uses merge sort to sort the array\n\n  function mergeSort(arr) {}\n\n  return {\n    state,\n    resetArray\n  };\n}","map":{"version":3,"sources":["/Users/jacobcarlone/lighthouse1/Sorting-Visualizer/sorting-visualizer/src/hooks/useApplicationData.jsx"],"names":["useState","useEffect","useApplicationData","state","setState","array","resetArray","i","push","Math","floor","random","mergeSort","arr"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAGA,eAAe,SAASC,kBAAT,GAA6B;AAExC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AAC/BK,IAAAA,KAAK,EAAE;AADwB,GAAD,CAAlC,CAHwC,CAOxC;;AACA,WAASC,UAAT,GAAqB;AACjB,QAAID,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,GAArB,EAA0BA,CAAC,EAA3B,EAA8B;AAC1BF,MAAAA,KAAK,CAACG,IAAN,CAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,CAAN,GAAU,CAA3B,IAAgC,CAA3C,CAAX;AACH;;AACDP,IAAAA,QAAQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAR;AACH;;AAAA,GAduC,CAgBxC;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT,CAjBwC,CAqBxC;;AACA,WAASM,SAAT,CAAmBC,GAAnB,EAAuB,CAEtB;;AAED,SAAO;AACHV,IAAAA,KADG;AAEHG,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["import { useState, useEffect } from \"react\";\n\n\nexport default function useApplicationData(){\n\n    //This custom hook is the beiung used to manage the overall data of the app.\n    const [state, setState] = useState({\n        array: []\n    });\n\n    //function that generates a new array with randomized numbers\n    function resetArray(){\n        let array = [];\n        for (let i = 0; i <= 290; i++){\n            array.push(Math.floor(Math.random() * (900 - 5 + 1) + 5));\n        }\n        setState({ array });\n    };\n\n    //Once the comonpent loads \n    useEffect(() => {\n        resetArray();\n    }, []);\n\n    //function that uses merge sort to sort the array\n    function mergeSort(arr){\n        \n    }\n\n    return {\n        state,\n        resetArray\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
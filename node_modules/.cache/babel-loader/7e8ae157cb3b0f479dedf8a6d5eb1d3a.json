{"ast":null,"code":"import { useState, useEffect } from \"react\";\nexport default function useApplicationData() {\n  //This custom hook is the beiung used to manage the overall data of the app.\n  const [state, setState] = useState({\n    array: []\n  }); //function that generates a new array with randomized numbers\n\n  function resetArray() {\n    let array = [];\n\n    for (let i = 0; i <= 290; i++) {\n      array.push(Math.floor(Math.random() * (800 - 5 + 1) + 5));\n    }\n\n    setState({\n      array\n    });\n  }\n\n  ; //Once the comonpent loads \n\n  useEffect(() => {\n    resetArray();\n  }, []); //Driver or main function that runs the merge sort algorithm\n\n  function mergeSort(arr) {\n    let colorChange = [];\n    let helperArr = arr.slice();\n    mergePartitions(arr, 0, arr.length - 1, helperArr, colorChange);\n    return colorChange;\n  }\n\n  ; //Function that creates partitions for the array\n\n  function mergePartitions(arr, start, end, helperArr, colorChange) {\n    if (start === end) {\n      return;\n    }\n\n    const middle = Math.floor((start + end) / 2);\n    mergePartitions(helperArr, start, middle, arr, colorChange);\n    mergePartitions(helperArr, middle + 1, end, arr, colorChange);\n    merge(arr, start, middle, end, helperArr, colorChange);\n  }\n\n  ; //Function that compares values and merges the subarrays together\n\n  function merge(arr, start, middle, end, helperArr, colorChange) {\n    let i = start;\n    let k = start;\n    let j = middle + 1; //Compare values in the helper array and overwrite them into the main array \n\n    while (i <= middle && j <= end) {\n      //push the values that are being compared to the color change array to change their color\n      colorChange.push([i, j]); //push them again to change their color back \n\n      colorChange.push([i, j]);\n\n      if (helperArr[i] <= helperArr[j]) {\n        colorChange.push([k, helperArr[i]]);\n        arr[k++] = helperArr[i++];\n      } else {\n        colorChange.push([k, helperArr[j]]);\n        arr[k++] = helperArr[j++];\n      }\n    } //Make sure to copy the left side and right side of the helper array into the main array\n\n\n    while (i <= middle) {\n      colorChange.push([i, i]);\n      colorChange.push([i, i]);\n      colorChange.push([k, helperArr[i]]);\n      arr[k++] = helperArr[i++];\n    }\n\n    while (j <= end) {\n      colorChange.push([j, j]);\n      colorChange.push([j, j]);\n      colorChange.push([k, helperArr[j]]);\n      arr[k++] = helperArr[j++];\n    }\n  }\n\n  ; //function that swaps two values\n\n  function swap(arr, i, j) {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n\n  ; //function that creates a max heap to sort an array in ascending order\n\n  function heapRoot(arr, length, index) {\n    let leftChild = 2 * index + 1;\n    let rightChild = 2 * index + 2;\n    let parent = index;\n\n    if (leftChild < length && arr[leftChild] > arr[parent]) {\n      parent = leftChild;\n    }\n\n    if (rightChild < length && arr[rightChild] > arr[parent]) {\n      parent = rightChild;\n    }\n\n    if (parent != index) {\n      swap(arr, parent, index);\n      heapRoot(arr, length, parent);\n    }\n  }\n\n  ; //Function that uses the max heap data structure to sort the array\n\n  function heapSort(arr) {\n    let n = arr.length;\n    let i = Math.floor(n / 2 - 1);\n    let k = n - 1;\n\n    while (i >= 0) {\n      heapRoot(arr, n, i);\n      i--;\n    }\n\n    while (k >= 0) {\n      swap(arr, 0, k);\n      heapRoot(arr, k, 0);\n      k--;\n    }\n\n    setState({\n      array: arr\n    });\n  }\n\n  ; //Function that sorts an array in ascending order by bubbling elements to their respective positions\n\n  function bubbleSort(arr) {\n    //Loop through all of the elements of the array\n    for (let i = 0; i < arr.length; i++) {\n      let swapped = false;\n\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        //If the current element is greater than it's following element then swapped them\n        if (arr[j] > arr[j + 1]) {\n          let temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp; //Set the boolean tracker to true\n\n          swapped = true;\n        }\n      } //If no elements were swap then break out of the outer loop and the array is sorted\n\n\n      if (!swapped) {\n        break;\n      }\n    }\n\n    setState({\n      array: arr\n    });\n  }\n\n  ; //Function that sorts an array in ascending order by finding the min value and placing it at the start of the array\n\n  function selectionSort(arr) {\n    //Loop through all of the elements in the array\n    for (let i = 0; i < arr.length; i++) {\n      let minIndex = i;\n\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[minIndex] > arr[j]) {\n          minIndex = j;\n        }\n      }\n\n      [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];\n    }\n\n    setState({\n      array: arr\n    });\n  }\n\n  ; //Function that sorts an array in ascending order\n\n  function insertionSort(arr) {\n    const n = arr.length; //Loop through all of the elements of the array starting at index 1\n\n    for (let i = 1; i < n; i++) {\n      let el = arr[i];\n      let j = i - 1; //removes the el and inserts the preceeding element in its place\n\n      while (j >= 0 && el < arr[j]) {\n        arr[j + 1] = arr[j];\n        j = j - 1;\n      }\n\n      arr[j + 1] = el;\n    }\n\n    setState({\n      array: arr\n    });\n  }\n\n  ;\n  return {\n    state,\n    resetArray,\n    mergeSort,\n    heapSort,\n    bubbleSort,\n    selectionSort,\n    insertionSort\n  };\n}\n;","map":{"version":3,"sources":["/Users/jacobcarlone/lighthouse1/Sorting-Visualizer/sorting-visualizer/src/hooks/useApplicationData.jsx"],"names":["useState","useEffect","useApplicationData","state","setState","array","resetArray","i","push","Math","floor","random","mergeSort","arr","colorChange","helperArr","slice","mergePartitions","length","start","end","middle","merge","k","j","swap","temp","heapRoot","index","leftChild","rightChild","parent","heapSort","n","bubbleSort","swapped","selectionSort","minIndex","insertionSort","el"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\n\nexport default function useApplicationData(){\n\n    //This custom hook is the beiung used to manage the overall data of the app.\n    const [state, setState] = useState({\n        array: []\n    });\n\n    //function that generates a new array with randomized numbers\n    function resetArray(){\n        let array = [];\n        for (let i = 0; i <= 290; i++){\n            array.push(Math.floor(Math.random() * (800 - 5 + 1) + 5));\n        }\n        setState({ array });\n    };\n\n    //Once the comonpent loads \n    useEffect(() => {\n        resetArray();\n    }, []);\n\n//Driver or main function that runs the merge sort algorithm\nfunction mergeSort(arr){\n    let colorChange = [];\n    let helperArr = arr.slice();\n    mergePartitions(arr, 0, arr.length - 1, helperArr, colorChange);\n    return colorChange;\n\n};\n\n//Function that creates partitions for the array\nfunction mergePartitions(arr, start, end, helperArr, colorChange){\n    if (start === end){\n        return;\n    }\n\n    const middle = Math.floor((start + end) / 2);\n    mergePartitions(helperArr, start, middle, arr, colorChange);\n    mergePartitions(helperArr, middle + 1, end, arr, colorChange);\n    merge(arr, start, middle, end, helperArr, colorChange);\n};\n\n//Function that compares values and merges the subarrays together\nfunction merge(arr, start, middle, end, helperArr, colorChange){\n    let i = start;\n    let k = start;\n    let j = middle + 1;\n\n    //Compare values in the helper array and overwrite them into the main array \n    while (i <= middle && j <= end){\n        \n        //push the values that are being compared to the color change array to change their color\n        colorChange.push([i, j]);\n\n        //push them again to change their color back \n        colorChange.push([i, j]);\n\n        if (helperArr[i] <= helperArr[j]){\n            colorChange.push([k, helperArr[i]]);\n            arr[k++] = helperArr[i++];\n        } else {\n            colorChange.push([k, helperArr[j]]);\n            arr[k++] = helperArr[j++];\n        }\n    }\n\n    //Make sure to copy the left side and right side of the helper array into the main array\n    while (i <= middle){\n        colorChange.push([i, i]);\n        colorChange.push([i, i]);\n        colorChange.push([k, helperArr[i]]);\n        arr[k++] = helperArr[i++];\n    }\n\n    while (j <= end){\n        colorChange.push([j, j]);\n        colorChange.push([j, j]);\n        colorChange.push([k, helperArr[j]]);\n        arr[k++] = helperArr[j++];\n    }\n};\n    //function that swaps two values\n    function swap(arr, i, j) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    };\n\n    //function that creates a max heap to sort an array in ascending order\n    function heapRoot(arr, length, index) {\n        let leftChild = 2 * index + 1;\n        let rightChild = 2 * index + 2;\n        let parent = index;\n    \n        if (leftChild < length && arr[leftChild] > arr[parent]) {\n            parent = leftChild;\n        }\n    \n        if (rightChild < length && arr[rightChild] > arr[parent]) {\n            parent = rightChild;\n        }\n    \n        if (parent != index) {\n            swap(arr, parent, index);\n            heapRoot(arr, length, parent);\n        }\n    };\n\n    //Function that uses the max heap data structure to sort the array\n    function heapSort(arr) {\n        let n = arr.length;\n        let i = Math.floor(n / 2 - 1);\n        let k = n - 1;\n    \n        while (i >= 0) {\n            heapRoot(arr, n, i);\n            i--;\n        }\n    \n        while (k >= 0) {\n            swap(arr, 0, k);\n            heapRoot(arr, k, 0);\n            k--;\n        }\n    \n        setState({\n            array: arr\n        });\n    };\n\n    //Function that sorts an array in ascending order by bubbling elements to their respective positions\n    function bubbleSort(arr) {\n        \n        //Loop through all of the elements of the array\n        for (let i = 0; i < arr.length; i++) { \n            let swapped = false;\n  \n            for (let j = 0; j < arr.length - i - 1; j++) {\n        \n                //If the current element is greater than it's following element then swapped them\n                if (arr[j] > arr[j + 1]) {\n                    let temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n  \n                    //Set the boolean tracker to true\n                    swapped = true;\n                }\n            }\n            //If no elements were swap then break out of the outer loop and the array is sorted\n            if (!swapped) {\n                break;\n            }\n        }\n  \n        setState({\n            array: arr\n        });\n  };\n\n    //Function that sorts an array in ascending order by finding the min value and placing it at the start of the array\n    function selectionSort(arr) {\n  \n        //Loop through all of the elements in the array\n        for (let i = 0; i < arr.length; i++){\n            let minIndex = i;\n  \n            for (let j = i + 1; j < arr.length; j++){\n                if (arr[minIndex] > arr[j]){\n                    minIndex = j;\n                }\n            }\n            [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];\n        }\n        setState({\n            array: arr\n        });\n    };\n\n    //Function that sorts an array in ascending order\n    function insertionSort(arr) {\n        const n = arr.length;\n  \n        //Loop through all of the elements of the array starting at index 1\n        for (let i = 1; i < n; i++) {\n            \n            let el = arr[i];\n            let j = i - 1;\n  \n            //removes the el and inserts the preceeding element in its place\n            while (j >= 0 && el < arr[j]) {\n                arr[j + 1] = arr[j];\n                j = j - 1;\n            }\n  \n            arr[j + 1] = el;\n        }\n        setState({\n            array: arr\n        });\n    };\n\n    return {\n        state,\n        resetArray,\n        mergeSort,\n        heapSort,\n        bubbleSort,\n        selectionSort,\n        insertionSort\n    }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}